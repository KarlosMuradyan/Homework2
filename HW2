// homework2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
using namespace std;

template <class T>
class Stack {
	int length;
	int capacity;
	T *items;

public:
	Stack() {
		items = new T[10];
		length = 0;
		capacity = 10;
	}

	~Stack() {
		length = 0;
	}

	int recap(T arr[]) {
		int new_capacity = capacity * 2;
		T* elements = new T[new_capacity];
		for (int i = 0; i < length; i++) {
			elements[i] = arr[i];
		}
		arr = elements;
		return new_capacity;
	}

	void push(T value) {
		if (length + 1 > capacity) {
			capacity = recap(items);
		}
		items[length] = value;
		length++;
	}

	void print() {
		for (int i = 0; i < length; i++) {
			cout << i << " member is " << items[i] << "  capacity: "<<capacity<< endl;
		}
	}

	void pop() {
		length--;
	}

	bool is_empty() {
		if (length == 0) {
			return true;
		}
		return false;
	}

	T get_top() {
		return items[length - 1];
	}
};





template <class T>
struct Node {
	T data;
	Node* next;
};

template <class T>
class Queue {
	Node<T>* head;

public:
	Queue(){
		head = NULL;
	}

	void enqueue(T value) {
		Node<T>* new_node = (Node<T>*) malloc(sizeof(Node<T>));
		new_node->data = value;
		new_node->next = NULL;
		if (head == NULL) {
			head = new_node;
		}
		else {
			Node<T>* last_element = head;
			while (last_element->next != NULL) {
				last_element = last_element->next;
			}
			last_element->next = new_node;
		}
	}

	void print() {
		if (head != NULL) {
			Node<T> * temp = head;
			while (temp->next != NULL) {
				cout << temp->data<<endl;
				temp = temp->next;
			}
			cout << "Last element: " << temp->data<<endl;
		}
		else {
			cout << "No elements." << endl;
		}
	}
};



int main()
{
	/**Stack<int> first;
	first.push(3);
	first.push(8);	
	first.push(0);
	first.push(84);
	first.push(9);
	first.push(8);
	first.push(1);
	first.push(7);
	first.push(8);
	first.push(12);
	first.push(8);
	first.pop();
	first.print();*/

	Queue<int> new_f;
	new_f.enqueue(5);
	new_f.enqueue(8);
	new_f.enqueue(15);
	new_f.print();


    return 0;
}

